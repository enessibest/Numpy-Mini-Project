# -*- coding: utf-8 -*-
"""MiniProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XYyBWIE7QtJMXlvT3qxUn8ZOe662FS_7
"""

import numpy as np

"""# Step 1 : Read the Data!"""

data_file="/content/makeSenseOfCensus.csv"

"""# Loading the data"""

data = np.genfromtxt(data_file, delimiter=",", skip_header=1)
print("\nData:\n\n ", data)

"""# Printing the type of data"""

print("\nType of data: \n\n\n", type(data))

"""# Step 2 : Append the Data"""

new_record = [[50,9,4,1,0,0,40,0]]

"""## Append 'new_record' (given) to 'data' using "np.concatenate()""""

final_data=np.concatenate((data,new_record))

final_data

"""# Step 3 : Check if it's a young country or old country

Create a new array called 'age' by taking only age column(age is the column with index 0) of 'census' array.
"""

age= final_data[:,0]
age

"""Find the max age and store it in a variable called 'max_age'.


"""

max_age= (age.max())
print("Maximum Age is ",max_age)

"""Find the min age and store it in a variable called 'min_age'."""

min_age= age.min()
print('minimum age is',min_age)

"""Find the mean of the age and store it in a variable called 'age_mean'."""

age_mean = age.mean()
print(age_mean)

"""Find the standard deviation of the age and store it in a variable called 'age_std'"""

age_std = age.std()
print(age_std)

"""# Step 4: Let's check the country's race distribution to identify the minorities

Create four different arrays by subsetting 'census' array by Race column(Race is the column with index 2) and save them in 'race_0','race_1', 'race_2', 'race_3' and 'race_4' respectively(Meaning: Store the array where 'race'column has value 0 in 'race_0', so on and so forth)
"""

final_data [final_data[:,2]==0]



"""Store the length of the above created arrays in 'len_0', 'len_1','len_2', 'len_3' and 'len_4' respectively"""

race_0=final_data[final_data[:,2]==0]

race_1=final_data[final_data[:,2]==1]

race_2=final_data[final_data[:,2]==2]

race_3=final_data[final_data[:,2]==3]

race_4=final_data[final_data[:,2]==4]

"""Find out which is the race with the minimum no. of citizens"""

len_0=len(race_0)
len_0

len_1=len(race_1)
print(len_1)
len_2=len(race_2)
len_3=len(race_3)
len_4=len(race_4)



"""Find out which is the race with the minimum no. of citizens"""

min_citizen= min(len_0,len_1,len_2,len_3,len_4)
print(min_citizen)

"""Store the number associated with the minority race in a variable called 'minority_race'(For eg: if "len(race_5)" is the minimum, store 5 in 'minority_race' because that is the index of the race having the least no. of citizens )"""

if min_citizen==len_0:
  print("Race_0 has minimum No of citizen")
elif min_citizen==len_1:
  print("Race_1 has minimum No of citizen")
elif min_citizen==len_2:
  print("Race_2 has minimum No of citizen")
elif min_citizen==len_3:
  print("Race_3 has minimum No of citizen")
else:
  print("Race_4 has minimum No of citizen")

"""Store the number associated with the minority race in a variable called 'minority_race'(For eg: if "len(race_5)" is the minimum, store 5 in 'minority_race' because that is the index of the race having the least no. of citizens )"""

if min_citizen==len_0:
  minority_race=0 
elif min_citizen==len_1:
  minority_race=1
elif min_citizen==len_2:
  minority_race=2
elif min_citizen==len_3:
  minority_race=3
else:
  minority_race=4
print("Minority Race: ",minority_race)

"""# Step 5: As per govt. records citizens above 60 should not work more than 25 hours a week. Let us check if the policy is in place

a.Create a new subset array called 'senior_citizens' by filtering 'census' according to age>60 (age is the column with index 0)

[Row,Columns]  :
"""

#from age column, filter out age data > 60 
senior_citizens = final_data[final_data[:,0]>60]
print(senior_citizens)

"""b.Add all the working hours(working hours is the column with index 6) of 'senior_citizens' and store it in a variable called 'working_hours_sum'"""

working_hours_sum =sum(senior_citizens[:,6])
working_hours_sum

"""c.Find the length of 'senior_citizens' and store it in a variable called 'senior_citizens_len'"""

senior_citizens_len= len(senior_citizens)
senior_citizens_len

"""d. Finally find the average working hours of the senior citizens by dividing 'working_hours_sum' by 'senior_citizens_len' and store it in a variable called 'avg_working hours'."""

avg_working_hours = working_hours_sum/senior_citizens_len
avg_working_hours

"""e. Print 'avg_working_hours' and see if the govt. policy is followed."""

print("Average Working Hour:", avg_working_hours)
if avg_working_hours > 25:
  print('the policy is not followed')
else:
  print('policy is followed')

"""# Step 6: Let's check that higher educated people have better pay in general.

Create two new subset arrays called 'high' and 'low' by filtering 'census' according to education-num>10 and education-num<=10 (education-num is the column with index 1) respectively.
"""

high = final_data[final_data[:,1]>10]

low = final_data[final_data[:,1]<=10]

"""Find the mean of income column(income is the column with index 7) of 'high' array and store it in 'avg_pay_high'. Do the same for 'low' array and store it's mean in 'avg_pay_low'."""

avg_pay_high=  high[:,7].mean()
print("Average Pay for Higher Educated People",round(avg_pay_high,2))

avg_pay_low = low[:,7].mean()
print('average pay for low educated people',round(avg_pay_low,2))